{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","gameScore","querySelector","startBtn","gameCells","querySelectorAll","loseMessage","winMessage","score","board","renderBoard","forEach","cell","idx","row","Math","floor","col","value","textContent","className","classList","add","addTile","emptyCells","rowIndex","tile","colIndex","push","length","random","randomRow","randomCol","move","direction","moved","tiles","mergeTiles","checkEndGame","remove","isBoardFull","canMove","reverse","mergedTiles","skipMerge","initBoard","Array","map","fill","e","key"],"mappings":"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","file":"main.d719c00f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gameScore = document.querySelector('.game-score');\n  const startBtn = document.querySelector('.button.start');\n  const gameCells = document.querySelectorAll('.field-cell');\n  const loseMessage = document.querySelector('.message-lose');\n  const winMessage = document.querySelector('.message-win');\n  let score = 0;\n  let board = [];\n\n  function initBoard() {\n    board = [...Array(4)].map(row => Array(4).fill(null));\n    addTile();\n    addTile();\n    renderBoard();\n    startBtn.classList.remove('start');\n    startBtn.classList.add('restart');\n    startBtn.textContent = 'Restart';\n\n    score = 0;\n    gameScore.textContent = score;\n\n    document.querySelector('.message-start').classList.add('hidden');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n\n  function renderBoard() {\n    gameCells.forEach((cell, idx) => {\n      const row = Math.floor(idx / 4);\n      const col = idx % 4;\n      const value = board[row][col];\n\n      cell.textContent = value || '';\n      cell.className = 'field-cell';\n\n      if (value) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n    gameScore.textContent = score;\n  }\n\n  function addTile() {\n    const emptyCells = [];\n\n    board.forEach((row, rowIndex) => {\n      row.forEach((tile, colIndex) => {\n        if (!tile) {\n          emptyCells.push([rowIndex, colIndex]);\n        }\n      });\n    });\n\n    if (emptyCells.length) {\n      const [\n        randomRow,\n        randomCol,\n      ] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      board[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  function move(direction) {\n    let moved = false;\n\n    if (direction === 'up' || direction === 'down') {\n      for (let col = 0; col < 4; col++) {\n        let tiles = [];\n\n        for (let row = 0; row < 4; row++) {\n          if (board[row][col]) {\n            tiles.push(board[row][col]);\n          }\n        }\n\n        tiles = mergeTiles(tiles, direction);\n\n        for (let row = 0; row < 4; row++) {\n          const value = tiles[row];\n\n          if (board[row][col] !== value) {\n            moved = true;\n            board[row][col] = value;\n          }\n        }\n      }\n    } else {\n      for (let row = 0; row < 4; row++) {\n        let tiles = [];\n\n        for (let col = 0; col < 4; col++) {\n          if (board[row][col]) {\n            tiles.push(board[row][col]);\n          }\n        }\n\n        tiles = mergeTiles(tiles, direction);\n\n        for (let col = 0; col < 4; col++) {\n          const value = tiles[col];\n\n          if (board[row][col] !== value) {\n            moved = true;\n            board[row][col] = value;\n          }\n        }\n      }\n    }\n\n    if (moved) {\n      addTile();\n      renderBoard();\n      checkEndGame();\n    }\n  }\n\n  function mergeTiles(tiles, direction) {\n    if (direction === 'down' || direction === 'right') {\n      tiles.reverse();\n    }\n\n    const mergedTiles = [];\n    let skipMerge = false;\n\n    for (const tile of tiles) {\n      if (mergedTiles.length\n        && mergedTiles[mergedTiles.length - 1]\n        === tile\n        && !skipMerge) {\n        mergedTiles[mergedTiles.length - 1] += tile;\n        score += tile * 2;\n        skipMerge = true;\n      } else {\n        mergedTiles.push(tile);\n        skipMerge = false;\n      }\n    }\n\n    while (mergedTiles.length < 4) {\n      mergedTiles.push(null);\n    }\n\n    if (direction === 'down' || direction === 'right') {\n      mergedTiles.reverse();\n    }\n\n    return mergedTiles;\n  }\n\n  function checkEndGame() {\n    // check win\n    for (const row of board) {\n      for (const tile of row) {\n        if (tile === 2048) {\n          winMessage.classList.remove('hidden');\n\n          return;\n        }\n      }\n    }\n    // check lose\n\n    if (isBoardFull() && !canMove()) {\n      loseMessage.classList.remove('hidden');\n    }\n  }\n\n  function isBoardFull() {\n    for (const row of board) {\n      for (const tile of row) {\n        if (!tile) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function canMove() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (row < 3 && board[row][col] === board[row + 1][col]) {\n          return true;\n        }\n\n        if (col < 3 && board[row][col] === board[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  startBtn.addEventListener('click', initBoard);\n\n  document.addEventListener('keydown', (e) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        move('up');\n        break;\n\n      case 'ArrowDown':\n        move('down');\n        break;\n\n      case 'ArrowLeft':\n        move('left');\n        break;\n\n      case 'ArrowRight':\n        move('right');\n        break;\n    }\n  });\n});\n"]}